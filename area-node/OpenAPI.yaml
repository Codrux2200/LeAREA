openapi: 3.0.3
info:
  title: AREA API - OpenAPI 3.0
  description: |-
    This is the AREA Server API description based on the OpenAPI 3.0 specification.  You can find out more about
    AREA at [GitHub repository](https://github.com/christophechr/LeAREA/tree/main)

  contact:
    email: raphael.mercie@epitech.eu
  version: 1.0.11

externalDocs:
  description: Find out more about Area project
  url: https://github.com/christophechr/LeAREA/tree/main
servers:
  - url: http://localhost:8080
tags:
  - name: Authentication
    description: Routes to login and register
  - name: Triggers
    description: Triggers routes
  - name: Actions
    description: Actions routes
  - name: GitHub
    description: Routes used for GitHub authentication
  - name: Flows
    description: Routes used for user flows
  - name: Google
    description: Routes used for Google authentication
  - name: Spotify
    description: Routes used for Spotify authentication
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user
      operationId: register
      requestBody:
        description: Register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: Missing email or password
        '409':
          description: Email already used
        '500':
          description: Password hashing failed or user storing failed
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      description: Login user by generating a JWT for the session
      operationId: login
      requestBody:
        description: Login the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        '200':
          description: Login token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: Missing email or password
        '401':
          description: Incorrect email or password
  /triggers:
    get:
      tags:
        - Triggers
      summary: Get all possible triggers
      description: get all available triggers for each available services, and what parameter you need to create them
      operationId: triggers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Returns the available triggers as JSON object.<br />
            - <b>id</b> The ID of the service
            - <b>name</b> The name of the service to display (e.g. GitHub)
            - <b>triggers</b> List of all triggers available for the service
              - <b>id</b> ID of the trigger
              - <b>name</b> Name of the trigger to display (e.g. When temperature is...)
              - <b>description</b> A brief to describe the trigger check
              - <b>params</b> Parameters accepted by the trigger
                - <b>id</b> ID of the trigger
                - <b>name</b> Parameter displayable name
                - <b>type</b> Type of the parameter. It can be : <b>string</b>, <b>number</b>, <b>enum</b> or <b>boolean</b>
                - <b>required</b> If the parameter is required or not
                - <b>description</b> A brief to describe the parameter
                - <b>values</b> OPTIONAL : If the parameter is an enum, the list of possible values
                  - <b>name</b> Name of the value to display
                  - <b>value</b> Value of the enum value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggersConfig'
        '401':
          description: Unauthorized
  /actions:
    get:
      tags:
        - Actions
      summary: Get all possible actions
      description: get all available actions for each available services, and what parameter you need to create them
      operationId: actions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Returns the available actions as JSON object.<br />
            - <b>id</b> The ID of the service
            - <b>name</b> The name of the service to display (e.g. GitHub)
            - <b>actions</b> List of all actions available for the service
              - <b>id</b> ID of the action
              - <b>name</b> Name of the action to display (e.g. When temperature is...)
              - <b>description</b> A brief to describe the action check
              - <b>params</b> Parameters accepted by the action
                - <b>id</b> ID of the action
                - <b>name</b> Parameter displayable name
                - <b>type</b> Type of the parameter. It can be : <b>string</b>, <b>number</b>, <b>enum</b> or <b>boolean</b>
                - <b>required</b> If the parameter is required or not
                - <b>description</b> A brief to describe the parameter
                - <b>values</b> OPTIONAL : If the parameter is an enum, the list of possible values
                  - <b>name</b> Name of the value to display
                  - <b>value</b> Value of the enum value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsConfig'
        '401':
          description: Unauthorized
  /auth/github:
    get:
      tags:
        - GitHub
      summary: GitHub get authorization URL
      description: Get the URL to redirect the user to GitHub authorization page
      operationId: githubAuth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Returns the URL to redirect the user to GitHub authorization page
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://https://github.com/login/oauth/authorize?client_id=1234567890&redirect_uri=http://localhost:8080/auth/github/callback&scope=user:email&allow_signup=true
        '401':
          description: Unauthorized'
    post:
      tags:
        - GitHub
      summary: Send GitHub code REQUIRED
      description: |
        This route have to be called to send the GitHub code to the backend to let it get the user token.<br />
        This route is mandatory to associate a GitHub account to the user.
        It will generate the token from the code given by GitHub with the URL given by the previous route.
      operationId: githubCode
      security:
        - bearerAuth: []
      requestBody:
        description: GitHub callback
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 1234567890
        required: true
      responses:
        '200':
          description: |
            GitHub token stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: GitHub token stored
        '400':
          description: Missing code
        '401':
          description: Unauthorized
  /flows:
    get:
      tags:
        - Flows
      summary: Get all user flows
      description: Get all user flows
      operationId: flows
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Returns the user flows as JSON array.<br />
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The unique identifier for the event flow.
                    user:
                      type: string
                      description: The user associated with the event flow. (you)
                    name:
                      type: string
                      description: The name of the event flow.
                    trigger:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The ID of the trigger.
                        params:
                          type: object
                          properties:
                            location:
                              type: string
                              description: The location for the trigger.
                            operator:
                              type: string
                              description: The operator for the trigger.
                            temperature:
                              type: string
                              description: The temperature for the trigger.
                            unit:
                              type: string
                              description: The unit of temperature for the trigger.
                    action:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The ID of the action.
                        params:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name parameter for the action.
                    enabled:
                      type: boolean
                      description: The status of the flow.
                    __v:
                      type: integer
                      description: Version information.
    post:
      tags:
        - Flows
      summary: Create a new user flow
      description: Create a new user flow
      operationId: flows
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the event flow.
                trigger:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the trigger.
                    params:
                      type: object
                      properties:
                        location:
                          type: string
                          description: The location for the trigger.
                        operator:
                          type: string
                          description: The operator for the trigger.
                        temperature:
                          type: string
                          description: The temperature for the trigger.
                        unit:
                          type: string
                          description: The unit of temperature for the trigger.
                action:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the action.
                    params:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name parameter for the action.
      responses:
        '201':
          description: |
            User flow created successfully.<br />
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Flow created successfully
        '400':
          description: Missing name, trigger, action or invalid trigger or action ID
        '401':
          description: Unauthorized
        '500':
          description: Failed to create the flow
  /flows/{id}:
      delete:
        tags:
          - Flows
        summary: Delete a user flow
        description: Delete a user flow
        operationId: flows
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            description: The ID of the flow to delete.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: |
              User flow deleted successfully.<br />
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Flow deleted successfully
          '401':
            description: Unauthorized
          '500':
            description: Failed to delete the flow
      put:
        tags:
          - Flows
        summary: Update a user flow
        description: Update a user flow
        operationId: flows
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            description: The ID of the flow to update.
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the event flow.
                  trigger:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The ID of the trigger.
                      params:
                        type: object
                        properties:
                          location:
                            type: string
                            description: The location for the trigger.
                          operator:
                            type: string
                            description: The operator for the trigger.
                          temperature:
                            type: string
                            description: The temperature for the trigger.
                          unit:
                            type: string
                            description: The unit of temperature for the trigger.
                  action:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The ID of the action.
                      params:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name parameter for the action.
                  enabled:
                    type: boolean
                    description: The status of the flow.
        responses:
          '200':
            description: |
              User flow updated successfully.<br />
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Flow updated successfully
          '400':
            description: Missing name, trigger, action or invalid trigger or action ID
          '401':
            description: Unauthorized
          '500':
            description: Failed to update the flow
  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get user information
      description: Used to know if the user JWT is still valid, and returns the services associated with the user
      operationId: me
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            User JWT is still valid, returns the user information and the services associated with the user.<br />
          content:
            application/json:
              schema:
                type: object
                properties:
                  isGithubConnected:
                    type: boolean
                    example: true
                  isGoogleConnected:
                    type: boolean
                    example: false
        '401':
          description: Unauthorized
  /google:
    get:
      tags:
        - Google
      summary: Google get authorization URL
      description: Get the URL to redirect the user to Google authorization page
      operationId: googleAuth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Returns the URL to redirect the user to Google authorization page
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://accounts.google.com/o/oauth2/v2/auth?client_id=1234567890&redirect_uri=http://localhost:8080/auth/google/callback&response_type=code&scope=https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/userinfo.profile&access_type=offline
        '401':
          description: Unauthorized'
    post:
      tags:
        - Google
      summary: Send Google code REQUIRED
      description: |
        This route have to be called to send the Google code to the backend to let it get the user token.<br />
        This route is mandatory to associate a Google account to the user.
        It will generate the token from the code given by Google with the URL given by the previous route.
      operationId: googleCode
      security:
        - bearerAuth: []
      requestBody:
        description: Google callback
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 1234567890
        required: true
      responses:
        '200':
          description: |
            Google token stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Google token stored
        '400':
          description: Missing code
        '401':
          description: Unauthorized
  /spotify:
    get:
      tags:
        - Spotify
      summary: Spotify get authorization URL
      description: Get the URL to redirect the user to Spotify authorization page
      operationId: spotifyAuth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            Returns the URL to redirect the user to Spotify authorization page
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://accounts.spotify.com/authorize?client_id=1234567890&redirect_uri=http://localhost:8080/auth/spotify/callback&response_type=code&scope=user-read-private%20user-read-email&show_dialog=true
        '401':
          description: Unauthorized'
    post:
      tags:
        - Spotify
      summary: Send Spotify code REQUIRED
      description: |
        This route have to be called to send the Spotify code to the backend to let it get the user token.<br />
        This route is mandatory to associate a Spotify account to the user.
        It will generate the token from the code given by Spotify with the URL given by the previous route.
      operationId: spotifyCode
      security:
        - bearerAuth: []
      requestBody:
        description: Spotify callback
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 1234567890
        required: true
      responses:
        '200':
          description: |
            Spotify token stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Spotify token stored
        '400':
          description: Missing code
        '401':
          description: Unauthorized
        '500':
          description: Failed to store the token




components:
  securitySchemes:
      bearerAuth:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          example: user@email.com
        password:
          type: string
          example: '12345'
    UserLoginResponse:
      type: object
      properties:
        id:
          type: string
          example: 657ce6e26f5235905f0178f3
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NTdjZTZlMjZmNTIzNTkwNWYwMTc4ZjMiLCJlbWFpbCI6InVzZXJAbWFpbC5jb20iLCJpYXQiOjE3MDI3MzIwNDgsImV4cCI6MTcwMjgxODQ0OH0.8JjWDxH9Q_UYi2yGwt4z17lQGgWdpUwQp_cDro41in0'
    TriggersConfig:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: The ID of the trigger service.
          name:
            type: string
            description: The name of the trigger service.
          actions:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the trigger.
                name:
                  type: string
                  description: The name of the trigger.
                description:
                  type: string
                  description: Description of the trigger.
                params:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The ID of the parameter.
                      name:
                        type: string
                        description: The name of the parameter.
                      type:
                        type: string
                        description: The data type of the parameter.
                      required:
                        type: boolean
                        description: Indicates if the parameter is required.
                      description:
                        type: string
                        description: Description of the parameter.
    ActionsConfig:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: The ID of the action service.
          name:
            type: string
            description: The name of the action service.
          actions:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the action action.
                name:
                  type: string
                  description: The name of the action action.
                description:
                  type: string
                  description: Description of the action action.
                params:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The ID of the parameter.
                      name:
                        type: string
                        description: The name of the parameter.
                      type:
                        type: string
                        description: The data type of the parameter.
                      required:
                        type: boolean
                        description: Indicates if the parameter is required.
                      description:
                        type: string
                        description: Description of the parameter.
